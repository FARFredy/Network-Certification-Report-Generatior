version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: network_cert_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: network_certification
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network_cert_net

  # Redis para cache y sesiones (opcional)
  redis:
    image: redis:7-alpine
    container_name: network_cert_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network_cert_net

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
    container_name: network_cert_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: network_certification
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      JWT_SECRET: ${JWT_SECRET:-tu_jwt_secret_super_secreto_cambiar_en_produccion}
      JWT_EXPIRES_IN: 24h
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001,https://tu-frontend-dominio.com}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      MAX_FILE_SIZE: 5242880
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      # En desarrollo, montar código fuente para hot reload
      - ${PWD}:/app:cached
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - network_cert_net

  # Frontend React (opcional - para desarrollo)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: network_cert_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000/api}
      REACT_APP_ENV: ${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    volumes:
      # Solo en desarrollo
      - ./frontend:/app:cached
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - network_cert_net
    profiles:
      - frontend

  # Nginx Reverse Proxy (para producción)
  nginx:
    image: nginx:alpine
    container_name: network_cert_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - network_cert_net
    profiles:
      - production

  # pgAdmin para administración de BD (desarrollo)
  pgadmin:
    image: dpage/pgadmin4
    container_name: network_cert_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@empresa.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - network_cert_net
    profiles:
      - development

  # Prometheus para monitoreo (producción)
  prometheus:
    image: prom/prometheus
    container_name: network_cert_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - network_cert_net
    profiles:
      - monitoring

  # Grafana para visualización (producción)
  grafana:
    image: grafana/grafana
    container_name: network_cert_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3010:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - network_cert_net
    profiles:
      - monitoring

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

# Red personalizada
networks:
  network_cert_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16